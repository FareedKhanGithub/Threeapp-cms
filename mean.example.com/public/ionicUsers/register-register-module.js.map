{"version":3,"sources":["webpack:///./src/app/register/register.module.ts","webpack:///./src/app/register/register.page.html","webpack:///./src/app/register/register.page.scss","webpack:///./src/app/register/register.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEE;AAE/C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,2DAAY;KACxB;CACF,CAAC;AAWF;IAAA;IAAiC,CAAC;IAArB,kBAAkB;QAT9B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,2DAAY,CAAC;SAC7B,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAA;AAAH;;;;;;;;;;;;ACzB/B,kbAAkb,gBAAgB,oOAAoO,mBAAmB,ulBAAulB,mBAAmB,qI;;;;;;;;;;;ACAnyC,+DAA+D,2I;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AAET;AAEK;AACf;AAa/B;IAKE,sBACU,WAAwB,EACxB,MAAc;QADd,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QALxB,SAAI,GAAQ,IAAI,0CAAI,EAAE,CAAC,CAAqC,kHAAkH;QAC9K,WAAM,GAAQ,EAAE,CAAC,CAAgC,yDAAyD;IAKtG,CAAC;IAKL,+BAAQ,GAAR,cAAY,CAAC;IAKb,+BAAQ,GAAR,UAAS,QAAQ;QAEf,IAAG,QAAQ,CAAC,OAAO,IAAE,KAAK,EAAC;YACzB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAE7B,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,sBAAsB,EAAE,EAAmC,+EAA+E;gBACpK,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,yBAAyB,CAAC;aAClD;YAED,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iBAAiB,EAAE;gBAC7C,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,sDAAsD,CAAC;aAC/E;YAED,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,sBAAsB,EAAE;gBAClD,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,yBAAyB,CAAC;aAClD;YAED,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAA+C,mEAAmE;gBAClJ,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;aAC1D,CAA8E,gIAAgI;SAChN;QAID,+HAA+H;QAG/H,IAAG,QAAQ,CAAC,OAAO,KAAG,IAAI,EAAC;YACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;SAClC;IACH,CAAC;IAED,+BAAQ,GAAR;QAAA,iBAMC;QALC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAC5C,UAAC,QAAQ;YACP,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC,CACF,CAAC;IACJ,CAAC;IAxDU,YAAY;QAXxB,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,kGAAmC;;SAEpC,CAAC;yCAauB,yDAAW;YAChB,sDAAM;OAPb,YAAY,CA0DxB;IAAD,mBAAC;CAAA;AA1DwB","file":"register-register-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Email</ion-label>\\n    <ion-input [(ngModel)]=\\\"user.email\\\" name=\\\"email\\\" type=\\\"email\\\"></ion-input>\\n    <div *ngIf=\\\"errors.email\\\"> {{ errors.email }} </div>\\n  </ion-item>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Username</ion-label>\\n    <ion-input [(ngModel)]=\\\"user.username\\\" name=\\\"username\\\" type=\\\"text\\\"></ion-input>\\n    <div *ngIf=\\\"errors.username\\\"> {{ errors.username }} </div>\\n  </ion-item>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">First Name</ion-label>\\n    <ion-input [(ngModel)]=\\\"user.first_name\\\" name=\\\"first_name\\\" type=\\\"text\\\"></ion-input>\\n  </ion-item>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Last Name</ion-label>\\n    <ion-input [(ngModel)]=\\\"user.last_name\\\" name=\\\"last_name\\\" type=\\\"text\\\"></ion-input>\\n  </ion-item>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Password</ion-label>\\n    <ion-input [(ngModel)]=\\\"user.password\\\" name=\\\"username\\\" type=\\\"text\\\"></ion-input>\\n    <div *ngIf=\\\"errors.password\\\"> {{ errors.password }} </div>\\n  </ion-item>\\n\\n  <ion-button color=\\\"primary\\\" expand=\\\"full\\\" (click)=\\\"onSubmit()\\\">Submit</ion-button>\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdGVyL3JlZ2lzdGVyLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../auth.service';\nimport { User } from '../user';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\n\n\n\n\n\n\nexport class RegisterPage implements OnInit {                       //implements an interface\n\n  user:User = new User();                                     //is this a new instance?? so that the new member can be made and be manipulated to have multiple attributes (yes)\n  errors: any = {};                                //any mean any data type (I rmeember cause Jason said so)\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n\n\n\n  ngOnInit() {}\n\n\n\n\n  response(response): void{\n\n    if(response.success==false){\n      console.log(response.errors);\n\n      if( response.errors.name == 'MissingUsernameError' ){                                  //how did Zyris come to know that response.errors.name even comes to existance?\n        this.errors.username = 'Please enter a username';\n      }\n\n      if( response.errors.name == 'UserExistsError' ){\n        this.errors.username = 'A user with the given username is already registered';\n      }\n\n      if( response.errors.name == 'MissingPasswordError' ){\n        this.errors.password = 'Please enter a password';\n      }\n\n      if( response.errors.errors.email ){                                              //I think errors is a key word      //api comes from the api errors\n        this.errors.email = response.errors.errors.email.message;\n      }                                                                              //the response.errors.errors      //I think it would be easier if I used the nasa apod project because it uses an api with docs.\n    }\n\n\n\n    //the app project is not based on me it is more ased if there are api inorder inact the vision that I wwant to produce as well.\n\n\n    if(response.success===true){\n      this.router.navigate(['/login']);\n    }\n  }\n\n  onSubmit(): void{\n    this.authService.register(this.user).subscribe(\n      (response) => {\n        this.response(response);\n      }\n    );\n  }\n\n}"],"sourceRoot":""}