{"version":3,"sources":["webpack:///./src/app/login/login.module.ts","webpack:///./src/app/login/login.page.html","webpack:///./src/app/login/login.page.scss","webpack:///./src/app/login/login.page.ts"],"names":[],"mappings":"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","file":"login-login-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,                         //the three below are basic modules from Ionic\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)  //creates a module that ontains all the routes and directives\n                                          //(but no router service)\n  ],\n  declarations: [LoginPage]             //declarations\n})\nexport class LoginPageModule {}\n\n\n\n\n//remember that you never touch the spec.ts  159\n    //The spec files are unit tests for your source files.\n","module.exports = \"<ion-header>\\n  <ion-toolbar>       <!-- above or below content often accompanied by footer or header, in this case header which is above  -->\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>                                    <!-- the stuff on the top of the applcaiton -->\\n    </ion-buttons>\\n    <ion-title>login Social Security Number </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>        <!-- a playable area to use html (only once per file) -->\\n\\n  <ion-item *ngIf=\\\"errorMessage\\\" color=\\\"danger\\\">{{ errorMessage }}</ion-item>             <!--angular if statement,errorMessage is a keyword these are keywords there has to eb a way of finding these words -->\\n                                                                                                         <!--cannot create something from nothing-->\\n                                                              <!--this is defined in the login.page.ts file as a string that gets its results from the response of the user.    -->\\n\\n\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Username</ion-label>         <!--   https://www.w3schools.com/cssref/pr_class_position.asp       w3 school          this is floating for the box  -->\\n    <ion-input type=\\\"text\\\" name=\\\"username\\\" [(ngModel)]=\\\"user.username\\\"></ion-input>                       <!-- user.username is file and method in that  -->\\n  </ion-item>\\n\\n  <ion-item>\\n    <ion-label position=\\\"floating\\\">Password</ion-label>             <!-- https://docs.angularjs.org/api/ng/directive/ngModel  -->\\n    <ion-input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"user.password\\\"></ion-input>\\n  </ion-item>\\n\\n  <ion-button color=\\\"dark\\\" expand=\\\"full\\\" (click)=\\\"onSubmit()\\\">Submit</ion-button>       <!-- keep it lower case you tool, these are not bootstrap colors-->\\n\\n                    <!--ion-button color  is considered like documentation trigger line, so therefore -->\\n                        <!--      https://ionicframework.com/docs/api/button                                  -->\\n\\n              <!--https://medium.com/@paulstelzer/ionic-4-how-to-add-more-colors-and-use-them-as-color-in-buttons-and-more-7175ab4ae4e7 on the three baasic coolors in  -->\\n\\n\\n\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { CookieService } from 'ngx-cookie-service';             //cookie serivce is a session id so that so the user can come back to his login page open\n\n\n\n\n\nimport { AuthService } from '../auth.service';             //this is referin to the auth.service.ts file that is one directory above.is a file we made priors\nimport { User } from '../user';                            //this is refering to the user.ts file that is one directory above.\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',             //in the same component folder\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  user:User = new User();             //new instance of User;\n  errorMessage: string;       //lol this took alot of time. Whatever, if the thing doesnn texist online then most likely it was defined inside the project.\n                                    //perhaps youu could review\n  constructor(\n    private authService: AuthService,\n    private cookieService: CookieService,\n    private router: Router\n  ) {}\n\n\n\n  ngOnInit() {}\n\n\n\n\n//you cant print out a function straight like that is also anon as well\n\n\n  response(response): void{                                    //this anonymous function has the same name as its parameter very strange\n    if(response.success===false){                                    //.success is a boolean, Zyris said that sometime there truely is no documentation so really it is like \"You create something from nothing\"\n                                                                            //boolean\n      this.errorMessage = 'Invalid Credentials';               //this is will instill the errorMessage with a value\n    }\n\n    console.log(typeof(response.success));  //lol use this to troubleshot problems    //show the response.success is a boolean\n\n\n    if(response.success===true){                                               //.success is merely a boolean (Idk truely this is only a guess as there is no documentation on this)\n      var text = \"\";\n      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";       //this is just a regular string\n\n      for (var i = 0; i < 10; i++){\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n                                //so preety much the number could be 150 and it would land in the array of char at C for example.\n      }\n\n      this.cookieService.set('sugar', text, (1/24), '/ionicUsers');  //storing 1/24 in one hour  text the variable in to sugar\n      window.location.href='/ionicUsers';                            //it's a property that will tell you the current URL location of the browser.\n                                                                         //Changing the value of the property will redirect the page.\n    }\n  }\n\n\n\n\n\n\n\n\n\n  onSubmit(): void{\n    this.authService.logIn(this.user).subscribe(          //authService is a file,logIn is one of the methods in the authService\n                                                                //.subscribe is a  very unique ability int the angular universe, this is describe in the AngularGrand\n\n\n\n                                           //this iss the ablity of anonymous function and arrow function\n      (response) => {                           //arrow function = subscribes expects a callback function anonymous method     //any can be any type\n                                  //essential what this is a function so just a parameter name\n\n        this.response(response);                                //will then call the method above with the parament responce    //response is what you get from an api generally\n\n\n\n\n\n\n\n      }\n    );\n  }\n\n}\n\n\n\n\n//If you want to return an Observable some other code can subscribe to,\n      //but you still want to manipulate the data events in the current method, use map.\n\n      //The actual user of the observable needs to subscribe(), because without subscribe() the observable won't be executed at all.\n             //(forEach() or toArray() and probably others work as well to execute the observable instead of subscribe())\n\n      //subscribe() returns a Subscription that can not be subscribed to, but it can be used to cancel the subscription.\n\n      //map() returns an Observable which can be subscribed to.\n\n\n\n\n\n\n      //alot of this is either in placement of things\n         //or self made"],"sourceRoot":""}